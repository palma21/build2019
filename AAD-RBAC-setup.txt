#!/bin/bash

# Variables
PREFIX="build-AAD"
RG="${PREFIX}-rg"
LOC="westus2"
AKSNAME="${PREFIX}"
K8S_VERSION="1.13.5"
AZURE_ACCOUNT_NAME=<YOUR_SUBSCRIPTION>

# Setup right subscription
az account set -s $AZURE_ACCOUNT_NAME


# Create Server and Client App
serverApplicationId="$(az ad app create --display-name "${AKSNAME}Server" --identifier-uris "https://${AKSNAME}Server" --query appId -o tsv)"

az ad app update --id $serverApplicationId --set groupMembershipClaims=All
az ad sp create --id $serverApplicationId
serverApplicationSecret=$(az ad sp credential reset --name $serverApplicationId --credential-description "AKSPassword" --query password -o tsv)
az ad app permission add --id $serverApplicationId --api 00000003-0000-0000-c000-000000000000 --api-permissions e1fe6dd8-ba31-4d61-89e7-88639da4683d=Scope 06da0dbc-49e2-44d2-8312-53f166ab848a=Scope 7ab1d382-f21e-4acd-a863-ba3e13f7da61=Role
az ad app permission grant --id $serverApplicationId --api 00000003-0000-0000-c000-000000000000 
az ad app permission admin-consent --id  $serverApplicationId

oAuthPermissionId="$(az ad app show --id $serverApplicationId --query "oauth2Permissions[0].id" -o tsv)"
clientApplicationId="$(az ad app create --display-name "${AKSNAME}Client" --native-app --reply-urls "https://${AKSNAME}Client" --query appId -o tsv)"

az ad sp create --id $clientApplicationId 
az ad app permission add --id $clientApplicationId --api $serverApplicationId --api-permissions $oAuthPermissionId=Scope
az ad app permission grant --id $clientApplicationId --api $serverApplicationId


# Create Resource Group
az group create -n ${RG} -l ${LOC} 

# Create AKS SP
SP=$(az ad sp create-for-rbac -n "${AKSNAME}SP" --skip-assignment)
appId=$(echo $SP | jq -r .appId)
clientSecret=$(echo $SP | jq -r .password)

account="$(az account show --query '{subscriptionId:id,tenantId:tenantId,user:user.name}')"
tenantId="$(echo $account|jq -r .tenantId)"

# Create AKS
az aks create \
  -g $RG  \
  -n $AKSNAME \
  -k $K8S_VERSION \
  -c 1 \
  --generate-ssh-keys \
  --aad-server-app-id $serverApplicationId \
  --aad-server-app-secret $serverApplicationSecret \
  --aad-client-app-id $clientApplicationId \
  --aad-tenant-id $tenantId \
  --service-principal $appId \
  --client-secret $clientSecret






# Get Credentials
az aks get-credentials --resource-group $RG --name $AKSNAME --admin


## Demo
# If the user is part of the respective AAD Tenant
# userName="$(echo $account|jq -r .user)"

# Using objectId instead if the user is a guest user or not part of the AAD tenant
userName="$(az ad signed-in-user show --query objectId -o tsv)"


## Clean up

az group delete -n $RG
az ad sp delete --id $appId
az ad app delete --id $serverApplicationId
az ad app delete --id $clientApplicationId
